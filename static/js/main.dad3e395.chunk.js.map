{"version":3,"sources":["components/FilterForm.js","components/Tag.js","components/TagForm.js","utils/HelperFunctions.js","components/StudentCard.js","components/Students.js","components/Main.js","api/HatchwayAPI.js","App.js","reportWebVitals.js","index.js"],"names":["FilterForm","filters","addFilter","useState","formData","setFormData","handleChange","evt","target","name","value","fData","useEffect","className","label","htmlFor","placeholder","onChange","autoComplete","tag","Tag","TagForm","addTag","formInput","setFormInput","onSubmit","preventDefault","type","cleanData","student","fullName","firstName","lastName","toLowerCase","nameFilter","trim","tags","map","tagFilter","StudentCard","listOfScores","renderedTestScoreCount","company","email","grades","pic","skill","toggle","setToggle","studentTags","setStudentTags","renderTags","uuid","src","alt","toUpperCase","parseFloat","reduce","a","b","Number","length","toFixed","grade","onClick","Students","studentsList","students","filterByName","filter","includes","filterByTag","some","filteredStudents","filterStudents","id","Main","setFilters","HatchwayAPI","axios","get","data","App","setStudents","getStudents","studentsResp","updateStudents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dad3e395.chunk.js","sourcesContent":["import './FilterForm.css';\nimport { useState, useEffect } from 'react';\n\n/** Form for filtering by name or tags of students.\n *\n * Props:\n * - filters (state from parent component to be updated by event handlers)\n * - addFilter (function to update main state for filters)\n *\n * { Main } -> FilterForm\n */\n\n// TODO: position sticky to keep from scrolling within div?\n\nfunction FilterForm({filters, addFilter}) {\n  const [formData, setFormData] = useState(filters);\n  \n  function handleChange(evt) {\n    const {name, value} = evt.target;\n    setFormData(fData => ({\n        ...fData,\n        [name]: value\n      }\n    ))\n  }\n\n  useEffect(() => {\n    addFilter(formData)\n  }, [formData, filters, addFilter])\n  \n  return (\n    <form className=\"filter-form\">\n      <input \n        label=\"name\"\n        name=\"name\"\n        htmlFor=\"name\"\n        value={formData.name} \n        placeholder=\"Search by name\" \n        onChange={handleChange}\n        autoComplete=\"off\"\n      />\n      <input \n        label=\"tag\"\n        name=\"tag\"\n        htmlFor=\"tag\"\n        value={formData.tag} \n        placeholder=\"Search by tag\" \n        onChange={handleChange}\n        autoComplete=\"off\"\n      />\n    </form>\n  )\n}\n\nexport default FilterForm;","import './Tag.css';\n\n/** Simple render of a Tag 'button'\n *\n * Props:\n * - tag: string of a tag word\n *\n * { StudentCard } -> Tag\n **/\nfunction Tag({tag}) {\n  return (\n    <div className=\"tag\"> {tag}</div>\n  )\n}\n\nexport default Tag;","import './TagForm.css'\nimport { useState } from 'react';\n\n/** Form for add a tag for a student.\n *\n * Props:\n * - addTag (function to update StudentCard state for filters)\n *\n * { StudentCard } -> TagForm\n */\n\nfunction TagForm({ addTag }) {\n  const [formInput, setFormInput] = useState('');\n\n  function handleChange(evt){\n    evt.preventDefault();\n    const { value } = evt.target;\n\n    setFormInput(value)\n  }\n\n  function handleSubmit(evt){\n    evt.preventDefault();\n    addTag(formInput)\n    setFormInput('')\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className=\"tag-form\" \n        type=\"text\"\n        placeholder=\"Add a tag\"\n        name=\"addTag\"\n        value={formInput}\n        onChange={handleChange}\n        autoComplete=\"off\"\n      />\n    </form>\n  )\n}\n\nexport default TagForm;","  /**\n   * cleanse all data to do with names and tags\n   * @param {object} student - data regarding student\n   * @param {object} filters - values of each prop represents the filter form current text input\n   * @returns student name, name filter, tags array, and tags filter\n   */\n   function cleanData(student, filters) {\n    const fullName = (`${student.firstName} ${student.lastName}`).toLowerCase();\n    const nameFilter =  filters.name.trim().toLowerCase();\n\n    const tags = student.tags.map(tag => tag.toLowerCase());\n    const tagFilter =  filters.tag.trim().toLowerCase();\n    \n    return { fullName, nameFilter, tags, tagFilter }\n  }\n\n  // average of all grades, allowing for 3rd decimal place if needed. \n  function averageScore(listOfScores){\n    return parseFloat((listOfScores.reduce((a, b) => {\n      return Number(a) + Number(b)\n    }) / listOfScores.length).toFixed(3));\n  }\n  \nexport { cleanData, averageScore }","import \"./StudentCard.css\";\nimport { useState, useEffect } from 'react';\nimport Tag from './Tag'\nimport TagForm from './TagForm'\nimport { averageScore } from '../utils/HelperFunctions';\nimport { v4 as uuid } from 'uuid';\n\n/** Render a card showing the corresponding students data.\n *\n * Props:\n * - student (an object with details about the student)\n *\n * { Students } -> StudentCard -> { Tag, TagForm }\n */\n\n\nfunction StudentCard({ student }) {\n  let renderedTestScoreCount = 1; \n  const { \n    company, \n    email, \n    firstName, \n    lastName, \n    grades, \n    pic, \n    skill, \n    tags\n  } = student;\n\n  // state control for showing grades score list\n  const [toggle, setToggle] = useState(true);\n  // state control for students current tags\n  const [studentTags, setStudentTags] = useState(tags);\n  \n\n  // helper function TagForm uses to pass up form data to tags state.\n  function addTag(tag) {\n    setStudentTags(studentTags => [...studentTags, tag])\n  }\n  \n  function renderTags(tags) {\n    return <div className=\"tag-icons\">\n      { tags.map(tag => (\n        <Tag key={uuid()} tag={tag} />\n      ))\n      }\n    </div>\n  }\n\n  // update tags value for parent (student.tags) and children (renderTags()) component\n  useEffect(() => {\n    renderTags(studentTags);\n    student.tags = [...studentTags]\n  }, [student, studentTags])\n\n  return (\n    <div className=\"student-card\"> \n      <div className=\"profile-pic\">\n        <img src={pic} alt={`${firstName} ${lastName}`} />\n      </div>\n      <div className=\"student-info\"> \n        <h1>{`${firstName} ${lastName}`.toUpperCase()}</h1>\n        <div className=\"details\">\n          <h4 className=\"student-email\">Email: {email}</h4>\n          <h4 className=\"student-company\">Company: {company}</h4>\n          <h4 className=\"student-skill\">Skill: {skill}</h4>\n          <h4 className=\"student-average-score\">Average: {averageScore(grades)}%</h4>\n          <ul className={toggle ? 'hidden' : 'show'}>\n            { \n              grades.map(grade => {\n                return <li key={renderedTestScoreCount}> \n                          Test {renderedTestScoreCount++}:<span>{grade}%</span>\n                        </li>\n              })\n            }\n          </ul>\n          <div className=\"tags-container\">\n            { studentTags.length > 0 &&\n              renderTags(studentTags)\n            }\n            <TagForm student={student} addTag={addTag}/>\n          </div>\n        </div>\n      </div>\n      <button onClick={() => setToggle(!toggle)}>{ toggle ? '+' : '-'}</button>\n    </div>\n  )\n}\n\nexport default StudentCard;","import StudentCard from './StudentCard';\nimport { cleanData } from '../utils/HelperFunctions'\n\n/** Render a card for each student's data and editable tags.\n *\n * Props:\n * - students: array of { student, ... }\n * - filters (state from parent component to be updated by event handlers)\n *\n * { Main } -> Students -> { StudentCard }\n */\n\nfunction Students({ students, filters }) {\n  // render each student in students after applying current filters from FilterForm\n  function renderStudents(studentsList) {\n    const filteredStudents = filterStudents(studentsList);\n  \n    return filteredStudents.map(student => (\n      <StudentCard key={student.id} student={student}/>\n    ))\n  }\n\n  function filterStudents(studentsList) {\n    let filteredStudents = [];\n\n    // no filters\n    if(!filters.name && !filters.tag.length) return studentsList;\n\n    // only name filters\n    else if (filters.name && !filters.tag.length) filteredStudents = filterByName(studentsList);\n\n    // only tag filters\n    else if (!filters.name && filters.tag.length) filteredStudents = filterByTag(studentsList);\n\n    // both name and tag filters\n    else if (filters.name && filters.tag.length) {\n      filteredStudents = filterByName(studentsList);\n      filteredStudents = filterByTag(filteredStudents);\n    }\n\n    return filteredStudents\n  }  \n  \n  function filterByName(studentsList) {\n    return studentsList.filter(student => {\n      const { fullName, nameFilter} = cleanData(student, filters);\n      return fullName.includes(nameFilter);\n    })\n  }\n\n  function filterByTag(studentsList) {\n    return studentsList.filter(student => {\n      const { tags, tagFilter } = cleanData(student, filters);\n      return tags.some(tag => tag.includes(tagFilter));\n    })\n  }\n\n  return (\n    <>\n      {students && (renderStudents(students))}\n    </>\n  )\n}\n\nexport default Students;","import './Main.css';\nimport { useState } from 'react';\nimport FilterForm from './FilterForm';\nimport Students from './Students';\n\n/** Main container for filtering forms and students\n *\n * Props:\n * - students: array of { student, ... }\n *\n * State:\n * - filters: object with a filter for each input 'name' and 'tag' that we could potentially filter by\n *\n * {App} -> Main -> { FilterForm }\n *               -> { Students }\n */\n\nfunction Main({ students }) {\n  const [filters, setFilters] = useState({\n    \"name\": \"\",\n    \"tag\": \"\"\n  });\n\n  // helper function FilterForm uses to pass up form data to filters state.\n  function addFilter(filter){\n    setFilters(filter);\n  }\n\n  return (\n    <div className=\"main-container\">\n      <FilterForm\n        filters={filters}\n        addFilter={addFilter}\n      />\n      <Students students={students} filters={filters}/>\n    </div>\n  )\n}\n\nexport default Main;","import axios from 'axios'; \n\nconst BASE_URL = 'https://api.hatchways.io/assessment';\n\nclass HatchwayAPI {\n  \n  /*\n    returns [{...}] where each object is - \n    [{\n      city: \"Text\",\n      company: \"Text\", \n      email: \"Text@domain.com\", \n      firstName: \"Text\", \n      grades: Array of strings i.e ['1', '2', '3'],\n      id: \"Text of numbers\",\n      lastName: \"Text\",\n      pic: \"Text of url\",\n      skill: \"Text\",\n      tags: Array of strings i.e. ['tag1', 'tag2', 'tag3']\n    }]\n  */\n  static async getStudents() {\n    let students = await (await axios.get(`${BASE_URL}/students`)).data.students;\n    students = students.map( student => ({ ...student, tags: []}))\n    \n    return students\n  }\n}\n\nexport default HatchwayAPI;","import './App.css';\nimport { useEffect, useState } from 'react';\nimport Main from './components/Main'\nimport HatchwayAPI from \"./api/HatchwayAPI\";\n\n/** Site application.\n *\n * App -> Main\n **/\n\nfunction App() {\n  const [students, setStudents] = useState([]);\n  \n  // set state on initial component mount\n  useEffect( function udpateStudentsOnRender() {\n    async function updateStudents() {\n      const studentsResp = await HatchwayAPI.getStudents();\n      setStudents(() => [...studentsResp]);\n    }\n    updateStudents();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Main students={students} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}